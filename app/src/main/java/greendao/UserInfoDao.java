package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mylowcarbon.app.model.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MSeq = new Property(0, Long.class, "mSeq", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Status = new Property(2, int.class, "status", false, "STATUS");
        public final static Property Salt = new Property(3, String.class, "salt", false, "SALT");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property Nickname = new Property(5, String.class, "nickname", false, "NICKNAME");
        public final static Property Avatar = new Property(6, String.class, "avatar", false, "AVATAR");
        public final static Property Mobile = new Property(7, String.class, "mobile", false, "MOBILE");
        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
        public final static Property Invitation_code = new Property(9, String.class, "invitation_code", false, "INVITATION_CODE");
        public final static Property Access_token = new Property(10, String.class, "access_token", false, "ACCESS_TOKEN");
        public final static Property Errorlogin_time = new Property(11, int.class, "errorlogin_time", false, "ERRORLOGIN_TIME");
        public final static Property Error_count = new Property(12, int.class, "error_count", false, "ERROR_COUNT");
        public final static Property Update_time = new Property(13, int.class, "update_time", false, "UPDATE_TIME");
        public final static Property Create_time = new Property(14, int.class, "create_time", false, "CREATE_TIME");
        public final static Property Wallet_address = new Property(15, String.class, "wallet_address", false, "WALLET_ADDRESS");
        public final static Property Pay_type = new Property(16, int.class, "pay_type", false, "PAY_TYPE");
        public final static Property Gender = new Property(17, int.class, "gender", false, "GENDER");
        public final static Property Height = new Property(18, int.class, "height", false, "HEIGHT");
        public final static Property Weight = new Property(19, float.class, "weight", false, "WEIGHT");
        public final static Property Keystore = new Property(20, String.class, "keystore", false, "KEYSTORE");
        public final static Property Pay_pwd = new Property(21, String.class, "pay_pwd", false, "PAY_PWD");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: mSeq
                "\"ID\" TEXT," + // 1: id
                "\"STATUS\" INTEGER NOT NULL ," + // 2: status
                "\"SALT\" TEXT," + // 3: salt
                "\"PASSWORD\" TEXT," + // 4: password
                "\"NICKNAME\" TEXT," + // 5: nickname
                "\"AVATAR\" TEXT," + // 6: avatar
                "\"MOBILE\" TEXT," + // 7: mobile
                "\"EMAIL\" TEXT," + // 8: email
                "\"INVITATION_CODE\" TEXT," + // 9: invitation_code
                "\"ACCESS_TOKEN\" TEXT," + // 10: access_token
                "\"ERRORLOGIN_TIME\" INTEGER NOT NULL ," + // 11: errorlogin_time
                "\"ERROR_COUNT\" INTEGER NOT NULL ," + // 12: error_count
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 13: update_time
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 14: create_time
                "\"WALLET_ADDRESS\" TEXT," + // 15: wallet_address
                "\"PAY_TYPE\" INTEGER NOT NULL ," + // 16: pay_type
                "\"GENDER\" INTEGER NOT NULL ," + // 17: gender
                "\"HEIGHT\" INTEGER NOT NULL ," + // 18: height
                "\"WEIGHT\" REAL NOT NULL ," + // 19: weight
                "\"KEYSTORE\" TEXT," + // 20: keystore
                "\"PAY_PWD\" TEXT);"); // 21: pay_pwd
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long mSeq = entity.getMSeq();
        if (mSeq != null) {
            stmt.bindLong(1, mSeq);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
        stmt.bindLong(3, entity.getStatus());
 
        String salt = entity.getSalt();
        if (salt != null) {
            stmt.bindString(4, salt);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(8, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        String invitation_code = entity.getInvitation_code();
        if (invitation_code != null) {
            stmt.bindString(10, invitation_code);
        }
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(11, access_token);
        }
        stmt.bindLong(12, entity.getErrorlogin_time());
        stmt.bindLong(13, entity.getError_count());
        stmt.bindLong(14, entity.getUpdate_time());
        stmt.bindLong(15, entity.getCreate_time());
 
        String wallet_address = entity.getWallet_address();
        if (wallet_address != null) {
            stmt.bindString(16, wallet_address);
        }
        stmt.bindLong(17, entity.getPay_type());
        stmt.bindLong(18, entity.getGender());
        stmt.bindLong(19, entity.getHeight());
        stmt.bindDouble(20, entity.getWeight());
 
        String keystore = entity.getKeystore();
        if (keystore != null) {
            stmt.bindString(21, keystore);
        }
 
        String pay_pwd = entity.getPay_pwd();
        if (pay_pwd != null) {
            stmt.bindString(22, pay_pwd);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long mSeq = entity.getMSeq();
        if (mSeq != null) {
            stmt.bindLong(1, mSeq);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
        stmt.bindLong(3, entity.getStatus());
 
        String salt = entity.getSalt();
        if (salt != null) {
            stmt.bindString(4, salt);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(6, nickname);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(8, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        String invitation_code = entity.getInvitation_code();
        if (invitation_code != null) {
            stmt.bindString(10, invitation_code);
        }
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(11, access_token);
        }
        stmt.bindLong(12, entity.getErrorlogin_time());
        stmt.bindLong(13, entity.getError_count());
        stmt.bindLong(14, entity.getUpdate_time());
        stmt.bindLong(15, entity.getCreate_time());
 
        String wallet_address = entity.getWallet_address();
        if (wallet_address != null) {
            stmt.bindString(16, wallet_address);
        }
        stmt.bindLong(17, entity.getPay_type());
        stmt.bindLong(18, entity.getGender());
        stmt.bindLong(19, entity.getHeight());
        stmt.bindDouble(20, entity.getWeight());
 
        String keystore = entity.getKeystore();
        if (keystore != null) {
            stmt.bindString(21, keystore);
        }
 
        String pay_pwd = entity.getPay_pwd();
        if (pay_pwd != null) {
            stmt.bindString(22, pay_pwd);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // mSeq
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.getInt(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // salt
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // nickname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // avatar
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mobile
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // email
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // invitation_code
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // access_token
            cursor.getInt(offset + 11), // errorlogin_time
            cursor.getInt(offset + 12), // error_count
            cursor.getInt(offset + 13), // update_time
            cursor.getInt(offset + 14), // create_time
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // wallet_address
            cursor.getInt(offset + 16), // pay_type
            cursor.getInt(offset + 17), // gender
            cursor.getInt(offset + 18), // height
            cursor.getFloat(offset + 19), // weight
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // keystore
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // pay_pwd
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setMSeq(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStatus(cursor.getInt(offset + 2));
        entity.setSalt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNickname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMobile(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInvitation_code(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAccess_token(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setErrorlogin_time(cursor.getInt(offset + 11));
        entity.setError_count(cursor.getInt(offset + 12));
        entity.setUpdate_time(cursor.getInt(offset + 13));
        entity.setCreate_time(cursor.getInt(offset + 14));
        entity.setWallet_address(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setPay_type(cursor.getInt(offset + 16));
        entity.setGender(cursor.getInt(offset + 17));
        entity.setHeight(cursor.getInt(offset + 18));
        entity.setWeight(cursor.getFloat(offset + 19));
        entity.setKeystore(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPay_pwd(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setMSeq(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getMSeq();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getMSeq() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
