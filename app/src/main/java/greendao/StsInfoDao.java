package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mylowcarbon.app.model.StsInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STS_INFO".
*/
public class StsInfoDao extends AbstractDao<StsInfo, String> {

    public static final String TABLENAME = "STS_INFO";

    /**
     * Properties of entity StsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AccessKeyId = new Property(0, String.class, "AccessKeyId", true, "ACCESS_KEY_ID");
        public final static Property AccessKeySecret = new Property(1, String.class, "AccessKeySecret", false, "ACCESS_KEY_SECRET");
        public final static Property Expiration = new Property(2, String.class, "Expiration", false, "EXPIRATION");
        public final static Property SecurityToken = new Property(3, String.class, "SecurityToken", false, "SECURITY_TOKEN");
    }


    public StsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public StsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STS_INFO\" (" + //
                "\"ACCESS_KEY_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: AccessKeyId
                "\"ACCESS_KEY_SECRET\" TEXT," + // 1: AccessKeySecret
                "\"EXPIRATION\" TEXT," + // 2: Expiration
                "\"SECURITY_TOKEN\" TEXT);"); // 3: SecurityToken
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STS_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StsInfo entity) {
        stmt.clearBindings();
 
        String AccessKeyId = entity.getAccessKeyId();
        if (AccessKeyId != null) {
            stmt.bindString(1, AccessKeyId);
        }
 
        String AccessKeySecret = entity.getAccessKeySecret();
        if (AccessKeySecret != null) {
            stmt.bindString(2, AccessKeySecret);
        }
 
        String Expiration = entity.getExpiration();
        if (Expiration != null) {
            stmt.bindString(3, Expiration);
        }
 
        String SecurityToken = entity.getSecurityToken();
        if (SecurityToken != null) {
            stmt.bindString(4, SecurityToken);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StsInfo entity) {
        stmt.clearBindings();
 
        String AccessKeyId = entity.getAccessKeyId();
        if (AccessKeyId != null) {
            stmt.bindString(1, AccessKeyId);
        }
 
        String AccessKeySecret = entity.getAccessKeySecret();
        if (AccessKeySecret != null) {
            stmt.bindString(2, AccessKeySecret);
        }
 
        String Expiration = entity.getExpiration();
        if (Expiration != null) {
            stmt.bindString(3, Expiration);
        }
 
        String SecurityToken = entity.getSecurityToken();
        if (SecurityToken != null) {
            stmt.bindString(4, SecurityToken);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public StsInfo readEntity(Cursor cursor, int offset) {
        StsInfo entity = new StsInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // AccessKeyId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // AccessKeySecret
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Expiration
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // SecurityToken
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StsInfo entity, int offset) {
        entity.setAccessKeyId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAccessKeySecret(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExpiration(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSecurityToken(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(StsInfo entity, long rowId) {
        return entity.getAccessKeyId();
    }
    
    @Override
    public String getKey(StsInfo entity) {
        if(entity != null) {
            return entity.getAccessKeyId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StsInfo entity) {
        return entity.getAccessKeyId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
