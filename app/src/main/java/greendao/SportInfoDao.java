package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.mylowcarbon.app.model.SportInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPORT_INFO".
*/
public class SportInfoDao extends AbstractDao<SportInfo, Long> {

    public static final String TABLENAME = "SPORT_INFO";

    /**
     * Properties of entity SportInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Imei = new Property(1, String.class, "imei", false, "IMEI");
        public final static Property Steps = new Property(2, int.class, "steps", false, "STEPS");
        public final static Property Distances = new Property(3, float.class, "distances", false, "DISTANCES");
        public final static Property Calories = new Property(4, long.class, "calories", false, "CALORIES");
        public final static Property Clycle = new Property(5, float.class, "clycle", false, "CLYCLE");
        public final static Property Burn = new Property(6, long.class, "burn", false, "BURN");
        public final static Property Heart_rate = new Property(7, int.class, "heart_rate", false, "HEART_RATE");
        public final static Property Blood_1 = new Property(8, int.class, "blood_1", false, "BLOOD_1");
        public final static Property Blood_2 = new Property(9, int.class, "blood_2", false, "BLOOD_2");
        public final static Property Sleep = new Property(10, float.class, "sleep", false, "SLEEP");
        public final static Property Date = new Property(11, String.class, "date", false, "DATE");
    }


    public SportInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SportInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPORT_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IMEI\" TEXT," + // 1: imei
                "\"STEPS\" INTEGER NOT NULL ," + // 2: steps
                "\"DISTANCES\" REAL NOT NULL ," + // 3: distances
                "\"CALORIES\" INTEGER NOT NULL ," + // 4: calories
                "\"CLYCLE\" REAL NOT NULL ," + // 5: clycle
                "\"BURN\" INTEGER NOT NULL ," + // 6: burn
                "\"HEART_RATE\" INTEGER NOT NULL ," + // 7: heart_rate
                "\"BLOOD_1\" INTEGER NOT NULL ," + // 8: blood_1
                "\"BLOOD_2\" INTEGER NOT NULL ," + // 9: blood_2
                "\"SLEEP\" REAL NOT NULL ," + // 10: sleep
                "\"DATE\" TEXT);"); // 11: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPORT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SportInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
        stmt.bindLong(3, entity.getSteps());
        stmt.bindDouble(4, entity.getDistances());
        stmt.bindLong(5, entity.getCalories());
        stmt.bindDouble(6, entity.getClycle());
        stmt.bindLong(7, entity.getBurn());
        stmt.bindLong(8, entity.getHeart_rate());
        stmt.bindLong(9, entity.getBlood_1());
        stmt.bindLong(10, entity.getBlood_2());
        stmt.bindDouble(11, entity.getSleep());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(12, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SportInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imei = entity.getImei();
        if (imei != null) {
            stmt.bindString(2, imei);
        }
        stmt.bindLong(3, entity.getSteps());
        stmt.bindDouble(4, entity.getDistances());
        stmt.bindLong(5, entity.getCalories());
        stmt.bindDouble(6, entity.getClycle());
        stmt.bindLong(7, entity.getBurn());
        stmt.bindLong(8, entity.getHeart_rate());
        stmt.bindLong(9, entity.getBlood_1());
        stmt.bindLong(10, entity.getBlood_2());
        stmt.bindDouble(11, entity.getSleep());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(12, date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SportInfo readEntity(Cursor cursor, int offset) {
        SportInfo entity = new SportInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imei
            cursor.getInt(offset + 2), // steps
            cursor.getFloat(offset + 3), // distances
            cursor.getLong(offset + 4), // calories
            cursor.getFloat(offset + 5), // clycle
            cursor.getLong(offset + 6), // burn
            cursor.getInt(offset + 7), // heart_rate
            cursor.getInt(offset + 8), // blood_1
            cursor.getInt(offset + 9), // blood_2
            cursor.getFloat(offset + 10), // sleep
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SportInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImei(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSteps(cursor.getInt(offset + 2));
        entity.setDistances(cursor.getFloat(offset + 3));
        entity.setCalories(cursor.getLong(offset + 4));
        entity.setClycle(cursor.getFloat(offset + 5));
        entity.setBurn(cursor.getLong(offset + 6));
        entity.setHeart_rate(cursor.getInt(offset + 7));
        entity.setBlood_1(cursor.getInt(offset + 8));
        entity.setBlood_2(cursor.getInt(offset + 9));
        entity.setSleep(cursor.getFloat(offset + 10));
        entity.setDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SportInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SportInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SportInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
